source("E:/R - AIA-B2/Second.R", echo=TRUE)
source("E:/R - AIA-B2/Second.R", echo=TRUE)
source("E:/R - AIA-B2/Second.R", echo=TRUE)
source("E:/R - AIA-B2/Second.R", echo=TRUE)
source("E:/R - AIA-B2/Second.R", echo=TRUE)
source("E:/R - AIA-B2/Second.R", echo=TRUE)
source("E:/R - AIA-B2/Second.R", echo=TRUE)
source("E:/R - AIA-B2/Second.R", echo=TRUE)
source("E:/R - AIA-B2/Second.R", echo=TRUE)
source("E:/R - AIA-B2/Second.R", echo=TRUE)
source("E:/R - AIA-B2/Second.R", echo=TRUE)
source("E:/R - AIA-B2/Second.R", echo=TRUE)
source("E:/R - AIA-B2/Second.R", echo=TRUE)
source("E:/R - AIA-B2/Second.R", echo=TRUE)
source("E:/R - AIA-B2/Second.R", echo=TRUE)
source("E:/R - AIA-B2/Second.R", echo=TRUE)
source("E:/R - AIA-B2/Second.R")
is.logical(f)
source("E:/R - AIA-B2/Second.R", echo=TRUE)
source("E:/R - AIA-B2/Second.R", echo=TRUE)
source("E:/R - AIA-B2/Second.R", echo=TRUE)
source("E:/R - AIA-B2/Second.R", echo=TRUE)
source("E:/R - AIA-B2/Second.R", echo=TRUE)
source("E:/R - AIA-B2/Second.R", echo=TRUE)
source("E:/R - AIA-B2/Second.R", echo=TRUE)
source("E:/R - AIA-B2/Second.R", echo=TRUE)
source("E:/R - AIA-B2/Second.R", echo=TRUE)
source("E:/R - AIA-B2/Second.R", echo=TRUE)
source("E:/R - AIA-B2/Second.R", echo=TRUE)
source("E:/R - AIA-B2/Second.R", echo=TRUE)
source("E:/R - AIA-B2/Second.R", echo=TRUE)
source("E:/R - AIA-B2/Second.R", echo=TRUE)
source("E:/R - AIA-B2/Second.R", echo=TRUE)
source("E:/R - AIA-B2/Second.R", echo=TRUE)
source("E:/R - AIA-B2/Second.R", echo=TRUE)
source("E:/R - AIA-B2/Second.R", echo=TRUE)
source("E:/R - AIA-B2/Second.R", echo=TRUE)
source("E:/R - AIA-B2/Second.R", echo=TRUE)
source("E:/R - AIA-B2/Second.R", echo=TRUE)
source("E:/R - AIA-B2/Second.R", echo=TRUE)
source("E:/R - AIA-B2/Second.R", echo=TRUE)
source("E:/R - AIA-B2/Second.R", echo=TRUE)
source("E:/R - AIA-B2/Second.R", echo=TRUE)
source("E:/R - AIA-B2/Second.R", echo=TRUE)
source("E:/R - AIA-B2/Second.R", echo=TRUE)
source("E:/R - AIA-B2/Second.R", echo=TRUE)
source("E:/R - AIA-B2/Second.R", echo=TRUE)
source("E:/R - AIA-B2/Second.R", echo=TRUE)
source("E:/R - AIA-B2/Second.R", echo=TRUE)
source("E:/R - AIA-B2/Second.R", echo=TRUE)
source("E:/R - AIA-B2/Second.R", echo=TRUE)
source("E:/R - AIA-B2/Second.R", echo=TRUE)
source("E:/R - AIA-B2/Second.R", echo=TRUE)
source("E:/R - AIA-B2/Second.R", echo=TRUE)
p <- 0.1
qnorm(p)
p <- 0.05
qnorm(p)
setwd("~/Projects/Devang/DS-CP")
knitr::opts_chunk$set(echo = TRUE)
BTC<-read.csv("bitcoin_dataset.csv")
library(caret)
BTC<-na.omit(BTC)
library(corrplot)
cor <- cor(BTC[,2:12])
corrplot(cor, method = "pie")
plot(BTC$Date, BTC$btc_market_price)
mod<-lm(btc_market_price~btc_market_cap, data=BTC)
mod1<-lm(btc_market_price~btc_estimated_transaction_volume_usd, data=BTC)
summary(mod)
summary(mod1)
plot(BTC$btc_market_price,BTC$btc_market_cap)
plot(BTC$btc_market_price,BTC$btc_estimated_transaction_volume_usd)
set.seed(1)
train.index<-sample(1:nrow(BTC),0.70*nrow(BTC), replace=FALSE)
train <- BTC[train.index, ]
test  <- BTC[-train.index,]
#Training the model on train dataset and  predicting on test.
model1 <- lm(btc_market_price~btc_trade_volume , train)
summary(model1)
p1 <- predict(model1,test)
head(p1)
error1 <- p1 - test[["btc_market_price"]]
sqrt(mean(error1^2))
plot(p1)
#RMSE=510.7136
model2 <- lm(btc_market_price~btc_market_cap, train)
summary(model2)
p2 <- predict(model2,test)
head(p2)
error2 <- p2 - test[["btc_market_price"]]
sqrt(mean(error2^2))
plot(p2)
library(FactoMineR)
pc1<-PCA(BTC[,2:24],scale.unit = TRUE, ncp = 23, graph = TRUE)
summary(pc1)
a<-dimdesc(pc1,axes = c(1:2))
a$Dim.1
a$Dim.2
pc<-prcomp(BTC[,c("btc_market_price","btc_miners_revenue")], center = T, scale=T)
summary(pc)
head(pc$x)
model3<-lm(btc_market_price~btc_n_transactions_total, data=BTC)
summary(model3)
p3 <- predict(model3,test)
error3 <- p3 - test[["btc_market_price"]]
sqrt(mean(error3^2))
model4<-lm(btc_market_price~btc_n_transactions_total+btc_avg_block_size+btc_difficulty+btc_output_volume, data=BTC)
summary(model4)
p4 <- predict(model4,test)
error4 <- p4 - test[["btc_market_price"]]
sqrt(mean(error4^2))
plot(pressure)
model4<-lm(btc_market_price~btc_n_transactions_total+btc_avg_block_size+btc_difficulty+btc_output_volume, data=BTC)
summary(model4)
p4 <- predict(model4,test)
error4 <- p4 - test[["btc_market_price"]]
sqrt(mean(error4^2))
knitr::opts_chunk$set(echo = TRUE)
suppressMessages(library(baguette))
suppressMessages(library(DataExplorer))
suppressMessages(library(GGally))
suppressMessages(library(ggmap))
suppressMessages(library(janitor))
suppressMessages(library(textrecipes))
suppressMessages(library(tidymodels))
suppressMessages(library(tidyverse))
options(scipen = 999)
tidyverse_logo()
fig <- function(width, heigth){ options(repr.plot.width = width, repr.plot.height = heigth)}
fig(12,8)
hp <- suppressWarnings(read_csv("../input/sri-lanka-house-prices-dataset/house_prices.csv", show_col_types = FALSE) %>%
drop_na() %>%                                                            # 27% of data missing
clean_names() %>%                                                        # standardize col names
rename(lon = lat, lat = lon) %>%                                         # lat/lon reversed
mutate(price = as.numeric(gsub("Rs|,", "", price))) %>%                  # standardize price to USD
mutate(price = (price * 0.005)) %>%
mutate(land_size = as.numeric(gsub("perches", "", land_size))) %>%       # fix land size    (perches)
mutate(house_size = as.numeric(gsub("sqft|,", "", house_size))) %>%      # fix house size   (sqft)
filter(lon < 80.1, lat > 6.7, lat < 7.1) %>%                             # remove sparse data
select(-title, -sub_title, -address, -description, -post_url) %>%        # remove unwanted data
filter(house_size >= 300) %>%                                            # no house should be smaller than
mutate(seller_type =
case_when(seller_type == 'Premium-Member' ~ 'Premium', TRUE ~ as.character(seller_type))) %>%
drop_na())
setwd("~/Projects/Devang/DS-CP")
knitr::opts_chunk$set(echo = TRUE)
suppressMessages(library(baguette))
suppressMessages(library(DataExplorer))
suppressMessages(library(GGally))
suppressMessages(library(ggmap))
suppressMessages(library(janitor))
suppressMessages(library(textrecipes))
suppressMessages(library(tidymodels))
suppressMessages(library(tidyverse))
options(scipen = 999)
tidyverse_logo()
fig <- function(width, heigth){ options(repr.plot.width = width, repr.plot.height = heigth)}
fig(12,8)
hp <- suppressWarnings(read_csv("house_prices.csv", show_col_types = FALSE) %>%
drop_na() %>%                                                            # 27% of data missing
clean_names() %>%                                                        # standardize col names
rename(lon = lat, lat = lon) %>%                                         # lat/lon reversed
mutate(price = as.numeric(gsub("Rs|,", "", price))) %>%                  # standardize price to USD
mutate(price = (price * 0.005)) %>%
mutate(land_size = as.numeric(gsub("perches", "", land_size))) %>%       # fix land size    (perches)
mutate(house_size = as.numeric(gsub("sqft|,", "", house_size))) %>%      # fix house size   (sqft)
filter(lon < 80.1, lat > 6.7, lat < 7.1) %>%                             # remove sparse data
select(-title, -sub_title, -address, -description, -post_url) %>%        # remove unwanted data
filter(house_size >= 300) %>%                                            # no house should be smaller than
mutate(seller_type =
case_when(seller_type == 'Premium-Member' ~ 'Premium', TRUE ~ as.character(seller_type))) %>%
drop_na())
glimpse(hp)
api_key <- get_user_secret("google api")
knitr::opts_chunk$set(echo = TRUE)
suppressMessages(library(baguette))
suppressMessages(library(DataExplorer))
suppressMessages(library(GGally))
suppressMessages(library(ggmap))
suppressMessages(library(janitor))
suppressMessages(library(textrecipes))
suppressMessages(library(tidymodels))
suppressMessages(library(tidyverse))
options(scipen = 999)
tidyverse_logo()
fig <- function(width, heigth){ options(repr.plot.width = width, repr.plot.height = heigth)}
fig(12,8)
hp <- suppressWarnings(read_csv("house_prices.csv", show_col_types = FALSE) %>%
drop_na() %>%                                                            # 27% of data missing
clean_names() %>%                                                        # standardize col names
rename(lon = lat, lat = lon) %>%                                         # lat/lon reversed
mutate(price = as.numeric(gsub("Rs|,", "", price))) %>%                  # standardize price to USD
mutate(price = (price * 0.005)) %>%
mutate(land_size = as.numeric(gsub("perches", "", land_size))) %>%       # fix land size    (perches)
mutate(house_size = as.numeric(gsub("sqft|,", "", house_size))) %>%      # fix house size   (sqft)
filter(lon < 80.1, lat > 6.7, lat < 7.1) %>%                             # remove sparse data
select(-title, -sub_title, -address, -description, -post_url) %>%        # remove unwanted data
filter(house_size >= 300) %>%                                            # no house should be smaller than
mutate(seller_type =
case_when(seller_type == 'Premium-Member' ~ 'Premium', TRUE ~ as.character(seller_type))) %>%
drop_na())
glimpse(hp)
summary(lm(price ~ baths + land_size + beds + house_size + lon + lat, hp))
doParallel::registerDoParallel()
set.seed(242)
split <- hp %>% mutate(price = log(price)) %>% initial_split(strata = price)
train <- training(split)
test <- testing(split)
folds <- vfold_cv(train, v = 5, strata = price)
recipe <- recipe(price ~ baths + land_size + beds + house_size + lon + lat + location, train) %>% # RECIPE
textrecipes::step_tokenize(location) %>%
textrecipes::step_stopwords(location) %>%
textrecipes::step_tokenfilter(location, max_tokens = 10) %>%
textrecipes::step_tf(location)
prep(recipe)
knitr::opts_chunk$set(echo = TRUE)
suppressMessages(library(baguette))
suppressMessages(library(DataExplorer))
suppressMessages(library(GGally))
suppressMessages(library(ggmap))
suppressMessages(library(janitor))
suppressMessages(library(textrecipes))
suppressMessages(library(tidymodels))
suppressMessages(library(tidyverse))
options(scipen = 999)
tidyverse_logo()
fig <- function(width, heigth){ options(repr.plot.width = width, repr.plot.height = heigth)}
fig(12,8)
hp <- suppressWarnings(read_csv("house_prices.csv", show_col_types = FALSE) %>%
drop_na() %>%                                                            # 27% of data missing
clean_names() %>%                                                        # standardize col names
rename(lon = lat, lat = lon) %>%                                         # lat/lon reversed
mutate(price = as.numeric(gsub("Rs|,", "", price))) %>%                  # standardize price to USD
mutate(price = (price * 0.005)) %>%
mutate(land_size = as.numeric(gsub("perches", "", land_size))) %>%       # fix land size    (perches)
mutate(house_size = as.numeric(gsub("sqft|,", "", house_size))) %>%      # fix house size   (sqft)
filter(lon < 80.1, lat > 6.7, lat < 7.1) %>%                             # remove sparse data
select(-title, -sub_title, -address, -description, -post_url) %>%        # remove unwanted data
filter(house_size >= 300) %>%                                            # no house should be smaller than
mutate(seller_type =
case_when(seller_type == 'Premium-Member' ~ 'Premium', TRUE ~ as.character(seller_type))) %>%
drop_na())
glimpse(hp)
api_key <- get_user_secret("google api")
knitr::opts_chunk$set(echo = TRUE)
suppressMessages(library(baguette))
suppressMessages(library(DataExplorer))
suppressMessages(library(GGally))
suppressMessages(library(ggmap))
suppressMessages(library(janitor))
suppressMessages(library(textrecipes))
suppressMessages(library(tidymodels))
suppressMessages(library(tidyverse))
options(scipen = 999)
tidyverse_logo()
fig <- function(width, heigth){ options(repr.plot.width = width, repr.plot.height = heigth)}
fig(12,8)
hp <- suppressWarnings(read_csv("house_prices.csv", show_col_types = FALSE) %>%
drop_na() %>%                                                            # 27% of data missing
clean_names() %>%                                                        # standardize col names
rename(lon = lat, lat = lon) %>%                                         # lat/lon reversed
mutate(price = as.numeric(gsub("Rs|,", "", price))) %>%                  # standardize price to USD
mutate(price = (price * 0.005)) %>%
mutate(land_size = as.numeric(gsub("perches", "", land_size))) %>%       # fix land size    (perches)
mutate(house_size = as.numeric(gsub("sqft|,", "", house_size))) %>%      # fix house size   (sqft)
filter(lon < 80.1, lat > 6.7, lat < 7.1) %>%                             # remove sparse data
select(-title, -sub_title, -address, -description, -post_url) %>%        # remove unwanted data
filter(house_size >= 300) %>%                                            # no house should be smaller than
mutate(seller_type =
case_when(seller_type == 'Premium-Member' ~ 'Premium', TRUE ~ as.character(seller_type))) %>%
drop_na())
glimpse(hp)
api_key <- get_user_secret("b9181d1697ad347b")
setwd("~/Projects/Devang/DS-CP")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(GGally)
options(repr.plot.width = 12, repr.plot.height = 8)
data <- read.csv(file = 'data.csv')
head(data)
print(paste("Number of records: ", nrow(data)))
print(paste("Number of features: ", ncol(data)))
summary(data)
colnames(data)
unique(data$city)
maindf <- data[,c("price","bedrooms","sqft_living","floors",
"sqft_lot", "condition", "view", "yr_built")]
head(maindf)
sum(is.na(maindf))
maindf$oldbuilt <- as.integer(format(Sys.Date(), "%Y")) - maindf$yr_built
drops <- c("yr_built")
maindf = maindf[ , !(names(maindf) %in% drops)]
maindf
cor(maindf)
ggcorr(maindf, name="corr", label=T)
pairs(~bedrooms + sqft_living + floors + condition, data = maindf,
main = "Scatterplot Matrix")
par(mfrow=c(2, 3))  # divide graph area in 2 columns
boxplot(maindf$bedrooms, main="Bedrooms")
boxplot(maindf$sqft_living, main="sqft_living")
boxplot(maindf$floors, main="floors")
boxplot(maindf$condition, main="condition")
boxplot(maindf$view, main="view")
boxplot(maindf$oldbuilt, main="oldbuilt")
library(e1071)
par(mfrow=c(2, 3))
plot(density(maindf$bedrooms), main="Density Plot: Bedrooms", ylab="Frequency",
sub=paste("Skewness:", round(e1071::skewness(maindf$bedrooms), 2)))
polygon(density(maindf$bedrooms), col="green")
plot(density(maindf$sqft_living), main="Density Plot: sqft_living", ylab="Frequency",
sub=paste("Skewness:", round(e1071::skewness(maindf$sqft_living), 2)))
polygon(density(maindf$sqft_living), col="orange")
plot(density(maindf$sqft_lot), main="Density Plot: sqft_lot", ylab="Frequency",
sub=paste("Skewness:", round(e1071::skewness(maindf$sqft_lot), 2)))
polygon(density(maindf$sqft_lot), col="green")
plot(density(maindf$condition), main="Density Plot: condition", ylab="Frequency",
sub=paste("Skewness:", round(e1071::skewness(maindf$condition), 2)))
polygon(density(maindf$condition), col="orange")
plot(density(maindf$floors), main="Density Plot: floors", ylab="Frequency",
sub=paste("Skewness:", round(e1071::skewness(maindf$floors), 2)))
polygon(density(maindf$floors), col="green")
plot(density(maindf$oldbuilt), main="Density Plot: oldbuilt", ylab="Frequency",
sub=paste("Skewness:", round(e1071::skewness(maindf$oldbuilt), 2)))
polygon(density(maindf$oldbuilt), col="orange")
ggplot(maindf,aes(y=price,x=sqft_living)) +
geom_point() +
xlim(0, 9000) +
ylim(0, 5000000) +
geom_smooth(formula = y ~ x,method="lm")
sn <- sample(1:nrow(maindf), size = nrow(maindf)*0.8)     #
train_df <- maindf[sn,]
test_df <- maindf[-sn,]
nrow(train_df)
nrow(test_df)
head(train_df)
head(test_df)
linearmodel = lm(price~bedrooms + sqft_living + floors + sqft_lot + condition + view + oldbuilt,
data = train_df)
summary(linearmodel)
pred <- predict(linearmodel, newdata = test_df)
pred <- as.data.frame(pred)
head(pred)
rate <- data.frame(test_df$price, pred)
rate
setwd("~/Projects/Devang/DS-CP")
setwd("~/Projects/Devang/DS-CP")
